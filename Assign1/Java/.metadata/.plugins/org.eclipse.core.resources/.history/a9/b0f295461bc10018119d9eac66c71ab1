package Assign1;


import java.util.LinkedList;  
import java.util.concurrent.locks.Condition;  
import java.util.concurrent.locks.Lock;  
import java.util.concurrent.locks.ReentrantLock;  


public class ReaderWriter {

    private final int MAX_SIZE = 4;      
    private LinkedList<Object> list = new LinkedList<Object>();  
    private final Lock readerlock = new ReentrantLock();    
    private final Lock mutex = new ReentrantLock();
    
    public static void main(String[] args) {
    	ReaderWriter rw = new ReaderWriter();
        for(int i = 0; i < 10; i++)
        {
	      	new Thread(rw.new Writer()).start();
	       	new Thread(rw.new Reader()).start();
        }

    }
  
    class Writer implements Runnable {
    	
        @Override
        public void run()  
        {          	
        	readerlock.lock();
	        System.out.println("writer is writing"); 
	        readerlock.unlock();  

        }  
    }
  
    class Reader implements Runnable {   
    	private int reader = 0;
    	@Override
    	public void run()  
        {    		
    		mutex.lock();
    		reader += 1;
    		if (reader == 1)
    		{
    			readerlock.lock();
    		}
    		mutex.unlock();
    		
            System.out.println("reader is reading"); 
            
            mutex.lock();
            reader -= 1;
            if (reader == 0)
            {
            	readerlock.unlock();
            }
            mutex.unlock();
    		readerlock.unlock(); 
        }     	
    }
}
