import java.io.InputStreamReader;
import java.util.LinkedList;  
import java.util.concurrent.locks.Condition;  
import java.util.concurrent.locks.Lock;  
import java.util.concurrent.locks.ReentrantLock;  
import java.util.concurrent.TimeUnit;

public class Cache {

    private final int MAX_SIZE = 10;  
    
    private LinkedList<Object> list = new LinkedList<Object>();  
    private final Lock lock = new ReentrantLock();    
    private final Condition fullLock = lock.newCondition();    
    private final Condition emptyLock = lock.newCondition();  
    
    public static void main(String[] args) {
        Cache cache = new Cache();
        //for (int i = 1; i <= 20; ++i)  
        //{
        	new Thread(cache.new Producer()).start();
        	new Thread(cache.new Consumer()).start();
        //}
        	try  
            {
        	TimeUnit.SECONDS.sleep(1);
            }
        	catch(InterruptedException e)
        	{
        		e.printStackTrace();  
        	}
        	
   
        	
    }
  
    class Producer implements Runnable {
        @Override
        public void run()  
        {  
        	while (true)
        	{
        	lock.lock();        
            while (list.size() >= MAX_SIZE)  
            {  
                System.out.println("the size of cache = " + list.size() + ", cannot insert, should wait");  
                try  
                {  
                	fullLock.await();  
                }  
                catch (InterruptedException e)  
                {  
                    e.printStackTrace();  
                }  
            }  
      
            list.add(new Object());  
            System.out.println("successfully produce one product, the size of cache = " + list.size());        
            fullLock.signalAll();  
            emptyLock.signalAll();  
            lock.unlock();  
        	}
        }  
    }
  
    class Consumer implements Runnable {    	
    	@Override
    	public void run()  
        {  
    		while(true)
        	{
            lock.lock();        
            while (list.size() == 0)  
            {  
                System.out.println("the size of cache = " + list.size() + ", cannot get, should wait");  
                try  
                {  
                	emptyLock.await();  
                }  
                catch (InterruptedException e)  
                {  
                    e.printStackTrace();  
                }  
            }  
            list.remove();  
            System.out.println("successfully consume one product, the size of cache = " + list.size());        
            fullLock.signalAll();  
            emptyLock.signalAll();        
            lock.unlock();  
        	}
        }     	
    }
}
