package Assign1;

public class DiningPhilosophers {
	
    public static void main(String[] args) {
    	DiningPhilosophers dp = new DiningPhilosophers();
    	
	    Chopstick[] chopsticks = new Chopstick[5];
	    for (int i = 0; i < 5; i++) {
	        chopsticks[i] = dp.new Chopstick();     //total 5 chopsticks 
	    }
	    for (int i = 0; i < 5; i++) {
	        new Thread(dp.new Philosopher(i, chopsticks[i], chopsticks[(i + 1) % 5])).start();    //5 philosophers
	    }
	 }

	class Chopstick {
	    public Chopstick() {
	    }
	}
	class Philosopher implements Runnable {

	    private Chopstick left;
	    private Chopstick right;	    
	    private int  id;   
 	    public Philosopher(int id, Chopstick left, Chopstick right) {
	    	this.id = id;
	        this.left = left;
	        this.right = right;
	    }
	    public void run() {
	    	//start to take chopsticks
	        while (true) {
	        	System.out.println("Philosopher " + id + " is thinking"); 
	        	try {
	                Thread.sleep(1);
	            } catch (InterruptedException e1) {
	                e1.printStackTrace();
	            }
	            synchronized (left) {  //lock the left chopsticks
	            	synchronized (right) {   //lock the right chopsticks
	            		System.out.println("Philosopher " + id + " is eating"); 
	            		try {
	                        Thread.sleep(1);
	                    } catch (InterruptedException e1) {
	                        e1.printStackTrace();
	                    }
	            	}
	            }
	        } 
	    }
	}
}

